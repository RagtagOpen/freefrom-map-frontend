{"ast":null,"code":"var _jsxFileName = \"/home/thadryan/Workspace/nextd3/components/UsMap.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport statesLived from \"../public/data/stateslived.json\";\nimport stateScores from \"../public/data/state-scores.json\";\nimport usData from \"../public/data/us-states.json\";\nimport * as d3 from \"d3\";\n\nclass UsMap extends Component {\n  componentDidMount() {\n    this.statesLived = statesLived;\n    this.stateScores = stateScores;\n    this.usData = usData;\n    this.height = 500;\n    this.width = 960;\n    this.colorRange = [\"rgb(213,222,217)\", \"rgb(69,173,168)\", \"rgb(84,36,55)\", \"rgb(217,91,67)\"];\n    this.renderMap();\n  } // the takes the US data and the States data and adds the\n  // information from the states data to the states in the US objects\n\n\n  mapStatesToValues(statesLived, usData) {\n    for (var i = 0; i < statesLived.length; i++) {\n      var dataState = statesLived[i].state;\n      var dataValue = statesLived[i].visited;\n\n      for (var j = 0; j < usData.features.length; j++) {\n        var jsonState = usData.features[j].properties.name;\n\n        if (dataState == jsonState) {\n          usData.features[j].properties.visited = dataValue;\n          break;\n        }\n      }\n    }\n\n    return usData;\n  }\n\n  mapScoresToStates(scoreData, usData) {\n    for (var i = 0; i < scoreData.length; i++) {\n      let scoreStateName = scoreData[i].state;\n      var stateScores = scoreData[i].score;\n\n      for (var j = 0; j < usData.features.length; j++) {\n        var jsonStateName = usData.features[j].properties.name;\n\n        if (scoreStateName == jsonStateName) {\n          usData.features[j].properties.score = stateScores;\n          break;\n        }\n      }\n    }\n\n    return usData;\n  }\n\n  renderMap() {\n    // just unpacking for tidier variable names downstream\n    let usData = this.usData;\n    let statesLived = this.statesLived;\n    let colorRange = this.colorRange;\n    let width = this.width;\n    let height = this.height;\n    let stateScores = this.stateScores; // add the values to the state objects\n    // usData = this.mapStatesToValues(statesLived, usData);\n\n    usData = this.mapScoresToStates(stateScores, usData); // initalize the pojection and path\n\n    var projection = d3.geo.albersUsa().translate([width / 2, height / 2]).scale([1000]);\n    var path = d3.geo.path().projection(projection);\n    var color = d3.scale.linear().range(colorRange);\n    d3.select(\"body\").append(\"svg\").attr(\"width\", width).attr(\"height\", height).selectAll(\"path\").data(usData.features).enter().append(\"path\").attr(\"d\", path).style(\"stroke\", \"#fff\").style(\"stroke-width\", \"1\").style(\"fill\", function (d) {\n      return color(d.properties.score);\n    }).on('mouseover', function (d) {\n      var mouseSelection = d3.select(this).style({\n        opacity: '0.8'\n      }); // nodeSelection.select(\"text\").style({ opacity: '1.0' });\n    }).on('mouseout', function (d) {\n      var nodeSelection = d3.select(this).style({\n        opacity: '1.0'\n      }); // nodeSelection.select(\"text\").style({ opacity: '1.0' });\n    });\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      id: \"#\" + this.props.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 12\n      }\n    });\n  }\n\n}\n\nexport default UsMap;","map":{"version":3,"sources":["/home/thadryan/Workspace/nextd3/components/UsMap.js"],"names":["React","Component","statesLived","stateScores","usData","d3","UsMap","componentDidMount","height","width","colorRange","renderMap","mapStatesToValues","i","length","dataState","state","dataValue","visited","j","features","jsonState","properties","name","mapScoresToStates","scoreData","scoreStateName","score","jsonStateName","projection","geo","albersUsa","translate","scale","path","color","linear","range","select","append","attr","selectAll","data","enter","style","d","on","mouseSelection","opacity","nodeSelection","render","props","id"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport statesLived from \"../public/data/stateslived.json\"\nimport stateScores from \"../public/data/state-scores.json\"\nimport usData from \"../public/data/us-states.json\"\nimport * as d3 from \"d3\"\n\n\nclass UsMap extends Component {\n\n  componentDidMount() {\n\n\n    this.statesLived = statesLived;\n    this.stateScores = stateScores;\n    this.usData = usData;\n    this.height = 500;\n    this.width = 960;\n    this.colorRange = [\"rgb(213,222,217)\", \"rgb(69,173,168)\", \"rgb(84,36,55)\", \"rgb(217,91,67)\"]\n\n    this.renderMap();\n  }\n\n  // the takes the US data and the States data and adds the\n  // information from the states data to the states in the US objects\n  mapStatesToValues(statesLived, usData) {\n\n    for (var i = 0; i < statesLived.length; i++) {\n      var dataState = statesLived[i].state;\n      var dataValue = statesLived[i].visited;\n      for (var j = 0; j < usData.features.length; j++) {\n        var jsonState = usData.features[j].properties.name;\n        if (dataState == jsonState) {\n          usData.features[j].properties.visited = dataValue;\n          break;\n        }\n      }\n    }\n    return usData\n  }\n\n  mapScoresToStates(scoreData, usData) {\n\n    for (var i = 0; i < scoreData.length; i++) {\n      let scoreStateName = scoreData[i].state;\n      var stateScores = scoreData[i].score;\n      for (var j = 0; j < usData.features.length; j++) {\n        var jsonStateName = usData.features[j].properties.name;\n        if (scoreStateName == jsonStateName) {\n          usData.features[j].properties.score = stateScores;\n          break;\n        }\n      }\n    }\n    return usData\n  }\n\n  renderMap() {\n\n    // just unpacking for tidier variable names downstream\n    let usData = this.usData;\n    let statesLived = this.statesLived;\n    let colorRange = this.colorRange;\n    let width = this.width;\n    let height = this.height;\n    let stateScores = this.stateScores;\n\n    // add the values to the state objects\n    // usData = this.mapStatesToValues(statesLived, usData);\n    usData = this.mapScoresToStates(stateScores, usData)\n\n    // initalize the pojection and path\n    var projection = d3\n      .geo\n      .albersUsa()\n      .translate([width / 2, height / 2])\n      .scale([1000]);\n\n    var path = d3\n      .geo\n      .path()\n      .projection(projection);\n\n    var color = d3\n      .scale\n      .linear()\n      .range(colorRange);\n\n    d3.select(\"body\")\n      .append(\"svg\")\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .selectAll(\"path\")\n      .data(usData.features)\n      .enter()\n      .append(\"path\")\n      .attr(\"d\", path)\n      .style(\"stroke\", \"#fff\")\n      .style(\"stroke-width\", \"1\")\n      .style(\"fill\", function (d) {\n        return color(d.properties.score)\n      }).on('mouseover', function (d) {\n        var mouseSelection = d3.select(this).style({ opacity: '0.8' });\n        // nodeSelection.select(\"text\").style({ opacity: '1.0' });\n      }).on('mouseout', function (d) {\n        var nodeSelection = d3.select(this).style({ opacity: '1.0' });\n        // nodeSelection.select(\"text\").style({ opacity: '1.0' });\n      });\n\n  }\n\n  render() {\n    return <div id={\"#\" + this.props.id\n    } ></div >\n  }\n\n}\n\nexport default UsMap"]},"metadata":{},"sourceType":"module"}