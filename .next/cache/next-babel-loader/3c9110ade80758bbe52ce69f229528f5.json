{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar _jsxFileName = \"/home/thadryan/Workspace/nextd3/pages/Chart.js\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport StatesLived from \"../public/data/stateslived.json\";\nimport CitiesLived from \"../public/data/citieslived.json\";\nimport USData from \"../public/data/us-states.json\";\nimport * as d3 from \"d3\";\n\nvar Chart = /*#__PURE__*/function (_Component) {\n  _inherits(Chart, _Component);\n\n  var _super = _createSuper(Chart);\n\n  function Chart() {\n    _classCallCheck(this, Chart);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Chart, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.statesLived = StatesLived;\n      this.citieslived = CitiesLived;\n      this.usData = USData;\n      this.drawChart();\n    }\n  }, {\n    key: \"drawChart\",\n    value: function drawChart() {\n      var usData = this.usData;\n      var statesLived = this.statesLived;\n      var citieslived = this.citieslived; // confirm we've gotten access to the states\n\n      for (var j = 0; j < usData.features.length; j++) {\n        var jsonState = usData.features[j].properties.name;\n        console.log(jsonState);\n      } //Width and height of map\n\n\n      var width = 960;\n      var height = 500; // D3 Projection\n\n      var projection = d3.geo.albersUsa().translate([width / 2, height / 2]) // translate to center of screen\n      .scale([1000]); // scale things down so see entire US\n      // Define path generator\n\n      var path = d3.geo.path() // path generator that will convert GeoJSON to SVG paths\n      .projection(projection); // tell path generator to use albersUsa projection\n      // Define linear scale for output\n\n      var color = d3.scale.linear().range([\"rgb(213,222,217)\", \"rgb(69,173,168)\", \"rgb(84,36,55)\", \"rgb(217,91,67)\"]);\n      var legendText = [\"Cities Lived\", \"States Lived\", \"States Visited\", \"Nada\"]; //Create SVG element and append map to the SVG\n\n      var svg = d3.select(\"body\").append(\"svg\").attr(\"width\", width).attr(\"height\", height); // Append Div for tooltip to SVG\n\n      var div = d3.select(\"body\").append(\"div\").attr(\"class\", \"tooltip\").style(\"opacity\", 0);\n      var data = statesLived;\n      var json = usData; // Loop through each state data value in the .csv file\n\n      for (var i = 0; i < data.length; i++) {\n        // Grab State Name\n        var dataState = data[i].state; // Grab data value \n\n        var dataValue = data[i].visited; // Find the corresponding state inside the GeoJSON\n\n        for (var j = 0; j < json.features.length; j++) {\n          var jsonState = json.features[j].properties.name;\n\n          if (dataState == jsonState) {\n            // Copy the data value into the JSON\n            json.features[j].properties.visited = dataValue; // Stop looking through the JSON\n\n            break;\n          }\n        }\n      }\n    } //// drawcharts\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(\"div\", {\n        id: \"#\" + this.props.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 12\n        }\n      });\n    }\n  }]);\n\n  return Chart;\n}(Component);\n\nexport default Chart;","map":{"version":3,"sources":["/home/thadryan/Workspace/nextd3/pages/Chart.js"],"names":["React","Component","StatesLived","CitiesLived","USData","d3","Chart","statesLived","citieslived","usData","drawChart","j","features","length","jsonState","properties","name","console","log","width","height","projection","geo","albersUsa","translate","scale","path","color","linear","range","legendText","svg","select","append","attr","div","style","data","json","i","dataState","state","dataValue","visited","props","id"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport StatesLived from \"../public/data/stateslived.json\"\nimport CitiesLived from \"../public/data/citieslived.json\"\nimport USData from \"../public/data/us-states.json\"\nimport * as d3 from \"d3\"\n\n\nclass Chart extends Component {\n\n  componentDidMount() {\n    this.statesLived = StatesLived;\n    this.citieslived = CitiesLived;\n    this.usData = USData;\n    this.drawChart();\n  }\n\n  drawChart() {\n\n    let usData = this.usData;\n    let statesLived = this.statesLived\n    let citieslived = this.citieslived\n\n    // confirm we've gotten access to the states\n    for (var j = 0; j < usData.features.length; j++) {\n      var jsonState = usData.features[j].properties.name;\n      console.log(jsonState);\n    }\n    //Width and height of map\n    var width = 960;\n    var height = 500;\n\n    // D3 Projection\n    var projection = d3\n      .geo\n      .albersUsa()\n      .translate([width / 2, height / 2]) // translate to center of screen\n      .scale([1000]); // scale things down so see entire US\n\n\n    // Define path generator\n    var path = d3\n      .geo\n      .path() // path generator that will convert GeoJSON to SVG paths\n      .projection(projection);  // tell path generator to use albersUsa projection\n\n    // Define linear scale for output\n    var color = d3\n      .scale\n      .linear()\n      .range([\"rgb(213,222,217)\", \"rgb(69,173,168)\", \"rgb(84,36,55)\", \"rgb(217,91,67)\"]);\n\n    var legendText = [\"Cities Lived\", \"States Lived\", \"States Visited\", \"Nada\"];\n\n    //Create SVG element and append map to the SVG\n    var svg = d3\n      .select(\"body\")\n      .append(\"svg\")\n      .attr(\"width\", width)\n      .attr(\"height\", height);\n\n    // Append Div for tooltip to SVG\n    var div = d3\n      .select(\"body\")\n      .append(\"div\")\n      .attr(\"class\", \"tooltip\")\n      .style(\"opacity\", 0);\n\n    let data = statesLived;\n    let json = usData;\n\n\n    // Loop through each state data value in the .csv file\n    for (var i = 0; i < data.length; i++) {\n\n      // Grab State Name\n      var dataState = data[i].state;\n\n      // Grab data value \n      var dataValue = data[i].visited;\n\n      // Find the corresponding state inside the GeoJSON\n      for (var j = 0; j < json.features.length; j++) {\n        var jsonState = json.features[j].properties.name;\n\n        if (dataState == jsonState) {\n\n          // Copy the data value into the JSON\n          json.features[j].properties.visited = dataValue;\n\n          // Stop looking through the JSON\n          break;\n        }\n      }\n    }\n\n\n\n\n  } //// drawcharts\n\n\n\n\n\n  render() {\n    return <div id={\"#\" + this.props.id}></div>\n  }\n\n}\n\nexport default Chart"]},"metadata":{},"sourceType":"module"}