{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar _jsxFileName = \"/home/thadryan/Workspace/nextd3/pages/Chart.js\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport StatesLived from \"../public/data/stateslived.json\";\nimport CitiesLived from \"../public/data/citieslived.json\";\nimport USData from \"../public/data/us-states.json\";\nimport * as d3 from \"d3\";\n\nvar UsMap = /*#__PURE__*/function (_Component) {\n  _inherits(UsMap, _Component);\n\n  var _super = _createSuper(UsMap);\n\n  function UsMap() {\n    _classCallCheck(this, UsMap);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(UsMap, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.statesLived = StatesLived;\n      this.citieslived = CitiesLived;\n      this.usData = USData;\n      this.drawChart();\n    }\n  }, {\n    key: \"drawChart\",\n    value: function drawChart() {\n      // jus tunpacking for tidier variable names downstream\n      var usData = this.usData;\n      var statesLived = this.statesLived;\n      var citieslived = this.citieslived; // Original Author: Width and height of map\n\n      var width = 960;\n      var height = 500; // Original Author:  D3 Projection\n\n      var projection = d3.geo.albersUsa().translate([width / 2, height / 2]) // Original Author:  translate to center of screen\n      .scale([1000]); // Original Author:  scale things down so see entire US\n      // Original Author:  Define path generator\n\n      var path = d3.geo.path() // Original Author:  path generator that will convert GeoJSON to SVG paths\n      .projection(projection); // Original Author:  tell path generator to use albersUsa projection\n      // Original Author:  Define linear scale for output\n\n      var color = d3.scale.linear().range([\"rgb(213,222,217)\", \"rgb(69,173,168)\", \"rgb(84,36,55)\", \"rgb(217,91,67)\"]);\n      var legendText = [\"Cities Lived\", \"States Lived\", \"States Visited\", \"Nada\"]; // Original Author: Create SVG element and append map to the SVG\n      // I am not sure this does what the original authors' comments say\n      // I think it just make the svg and appends it the body of the document\n\n      var svg = d3.select(\"body\").append(\"svg\").attr(\"width\", width).attr(\"height\", height); // Original Author:  Append Div for tooltip to SVG\n      // not sure this works or is needed\n\n      var div = d3.select(\"body\").append(\"div\").attr(\"class\", \"tooltip\").style(\"opacity\", 0); // essentially, this loops through the cities lived data and adds attributes\n      // from it to the USData objects so they can be used to to map it later on \n      // Original Author:  Loop through each state data value in the .csv file\n\n      for (var i = 0; i < statesLived.length; i++) {\n        // Original Author:  Grab State Name\n        var dataState = statesLived[i].state; // Original Author:  Grab data value \n\n        var dataValue = statesLived[i].visited; // Original Author:  Find the corresponding state inside the GeoJSON\n\n        for (var j = 0; j < usData.features.length; j++) {\n          var jsonState = usData.features[j].properties.name;\n\n          if (dataState == jsonState) {\n            // Original Author:  Copy the data value into the JSON\n            usData.features[j].properties.visited = dataValue; // Original Author:  Stop looking through the JSON\n\n            break;\n          }\n        }\n      } // Original Author:  Bind the data to the SVG and create one path per GeoJSON feature\n\n\n      svg.selectAll(\"path\").data(usData.features).enter().append(\"path\").attr(\"d\", path).style(\"stroke\", \"#fff\").style(\"stroke-width\", \"1\").style(\"fill\", function (d) {\n        // Original Author:  Get data value\n        var haveVisited = d.properties.visited;\n\n        if (haveVisited) {\n          // Original Author: If value exists…\n          return color(haveVisited);\n        } else {\n          // Original Author: If value is undefined…\n          return \"rgb(213,222,217)\";\n        }\n      });\n      svg.selectAll(\"circle\").data(citieslived).enter().append(\"circle\").attr(\"cx\", function (d) {\n        return projection([d.lon, d.lat])[0];\n      }).attr(\"cy\", function (d) {\n        return projection([d.lon, d.lat])[1];\n      }).attr(\"r\", function (d) {\n        return Math.sqrt(d.years) * 4;\n      }).style(\"fill\", \"rgb(217,91,67)\").style(\"opacity\", 0.85) // Original Author:  Modification of custom tooltip code provided by Malcolm Maclean, \"D3 Tips and Tricks\" \n      // Original Author:  http:// Original Author: www.d3noob.org/2013/01/adding-tooltips-to-d3js-graph.html\n      .on(\"mouseover\", function (d) {\n        div.transition().duration(200).style(\"opacity\", .9);\n        div.text(d.place).style(\"left\", d3.event.pageX + \"px\").style(\"top\", d3.event.pageY - 28 + \"px\");\n      }) // Original Author:  fade out tooltip on mouse out               \n      .on(\"mouseout\", function (d) {\n        div.transition().duration(500).style(\"opacity\", 0);\n      }); // Original Author:  Modified Legend Code from Mike Bostock: http:// Original Author: bl.ocks.org/mbostock/3888852\n\n      var legend = d3.select(\"body\").append(\"svg\").attr(\"class\", \"legend\").attr(\"width\", 140).attr(\"height\", 200).selectAll(\"g\").data(color.domain().slice().reverse()).enter().append(\"g\").attr(\"transform\", function (d, i) {\n        return \"translate(0,\" + i * 20 + \")\";\n      });\n      legend.append(\"rect\").attr(\"width\", 18).attr(\"height\", 18).style(\"fill\", color);\n      legend.append(\"text\").data(legendText).attr(\"x\", 24).attr(\"y\", 9).attr(\"dy\", \".35em\").text(function (d) {\n        return d;\n      });\n    } // Original Author: // Original Author:  drawcharts\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(\"div\", {\n        id: \"#\" + this.props.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 12\n        }\n      });\n    }\n  }]);\n\n  return UsMap;\n}(Component);\n\nexport default UsMap;","map":{"version":3,"sources":["/home/thadryan/Workspace/nextd3/pages/Chart.js"],"names":["React","Component","StatesLived","CitiesLived","USData","d3","UsMap","statesLived","citieslived","usData","drawChart","width","height","projection","geo","albersUsa","translate","scale","path","color","linear","range","legendText","svg","select","append","attr","div","style","i","length","dataState","state","dataValue","visited","j","features","jsonState","properties","name","selectAll","data","enter","d","haveVisited","lon","lat","Math","sqrt","years","on","transition","duration","text","place","event","pageX","pageY","legend","domain","slice","reverse","props","id"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,WAAP,MAAwB,iCAAxB;AACA,OAAOC,WAAP,MAAwB,iCAAxB;AACA,OAAOC,MAAP,MAAmB,+BAAnB;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;;IAGMC,K;;;;;;;;;;;;;wCAEgB;AAClB,WAAKC,WAAL,GAAmBL,WAAnB;AACA,WAAKM,WAAL,GAAmBL,WAAnB;AACA,WAAKM,MAAL,GAAcL,MAAd;AACA,WAAKM,SAAL;AACD;;;gCAEW;AAEV;AACA,UAAID,MAAM,GAAG,KAAKA,MAAlB;AACA,UAAIF,WAAW,GAAG,KAAKA,WAAvB;AACA,UAAIC,WAAW,GAAG,KAAKA,WAAvB,CALU,CAOV;;AACA,UAAIG,KAAK,GAAG,GAAZ;AACA,UAAIC,MAAM,GAAG,GAAb,CATU,CAWV;;AACA,UAAIC,UAAU,GAAGR,EAAE,CAChBS,GADc,CAEdC,SAFc,GAGdC,SAHc,CAGJ,CAACL,KAAK,GAAG,CAAT,EAAYC,MAAM,GAAG,CAArB,CAHI,EAGqB;AAHrB,OAIdK,KAJc,CAIR,CAAC,IAAD,CAJQ,CAAjB,CAZU,CAgBQ;AAGlB;;AACA,UAAIC,IAAI,GAAGb,EAAE,CACVS,GADQ,CAERI,IAFQ,GAED;AAFC,OAGRL,UAHQ,CAGGA,UAHH,CAAX,CApBU,CAuBkB;AAE5B;;AACA,UAAIM,KAAK,GAAGd,EAAE,CACXY,KADS,CAETG,MAFS,GAGTC,KAHS,CAGH,CAAC,kBAAD,EAAqB,iBAArB,EAAwC,eAAxC,EAAyD,gBAAzD,CAHG,CAAZ;AAKA,UAAIC,UAAU,GAAG,CAAC,cAAD,EAAiB,cAAjB,EAAiC,gBAAjC,EAAmD,MAAnD,CAAjB,CA/BU,CAiCV;AACA;AACA;;AACA,UAAIC,GAAG,GAAGlB,EAAE,CACTmB,MADO,CACA,MADA,EAEPC,MAFO,CAEA,KAFA,EAGPC,IAHO,CAGF,OAHE,EAGOf,KAHP,EAIPe,IAJO,CAIF,QAJE,EAIQd,MAJR,CAAV,CApCU,CA0CV;AACA;;AACA,UAAIe,GAAG,GAAGtB,EAAE,CACTmB,MADO,CACA,MADA,EAEPC,MAFO,CAEA,KAFA,EAGPC,IAHO,CAGF,OAHE,EAGO,SAHP,EAIPE,KAJO,CAID,SAJC,EAIU,CAJV,CAAV,CA5CU,CAkDV;AACA;AAEA;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGtB,WAAW,CAACuB,MAAhC,EAAwCD,CAAC,EAAzC,EAA6C;AAE3C;AACA,YAAIE,SAAS,GAAGxB,WAAW,CAACsB,CAAD,CAAX,CAAeG,KAA/B,CAH2C,CAK3C;;AACA,YAAIC,SAAS,GAAG1B,WAAW,CAACsB,CAAD,CAAX,CAAeK,OAA/B,CAN2C,CAQ3C;;AACA,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG1B,MAAM,CAAC2B,QAAP,CAAgBN,MAApC,EAA4CK,CAAC,EAA7C,EAAiD;AAC/C,cAAIE,SAAS,GAAG5B,MAAM,CAAC2B,QAAP,CAAgBD,CAAhB,EAAmBG,UAAnB,CAA8BC,IAA9C;;AAEA,cAAIR,SAAS,IAAIM,SAAjB,EAA4B;AAE1B;AACA5B,YAAAA,MAAM,CAAC2B,QAAP,CAAgBD,CAAhB,EAAmBG,UAAnB,CAA8BJ,OAA9B,GAAwCD,SAAxC,CAH0B,CAK1B;;AACA;AACD;AACF;AACF,OA3ES,CA6EV;;;AACAV,MAAAA,GAAG,CAACiB,SAAJ,CAAc,MAAd,EACGC,IADH,CACQhC,MAAM,CAAC2B,QADf,EAEGM,KAFH,GAGGjB,MAHH,CAGU,MAHV,EAIGC,IAJH,CAIQ,GAJR,EAIaR,IAJb,EAKGU,KALH,CAKS,QALT,EAKmB,MALnB,EAMGA,KANH,CAMS,cANT,EAMyB,GANzB,EAOGA,KAPH,CAOS,MAPT,EAOiB,UAAUe,CAAV,EAAa;AAE1B;AACA,YAAIC,WAAW,GAAGD,CAAC,CAACL,UAAF,CAAaJ,OAA/B;;AAEA,YAAIU,WAAJ,EAAiB;AACf;AACA,iBAAOzB,KAAK,CAACyB,WAAD,CAAZ;AACD,SAHD,MAGO;AACL;AACA,iBAAO,kBAAP;AACD;AACF,OAnBH;AAuBArB,MAAAA,GAAG,CAACiB,SAAJ,CAAc,QAAd,EACGC,IADH,CACQjC,WADR,EAEGkC,KAFH,GAGGjB,MAHH,CAGU,QAHV,EAIGC,IAJH,CAIQ,IAJR,EAIc,UAAUiB,CAAV,EAAa;AACvB,eAAO9B,UAAU,CAAC,CAAC8B,CAAC,CAACE,GAAH,EAAQF,CAAC,CAACG,GAAV,CAAD,CAAV,CAA2B,CAA3B,CAAP;AACD,OANH,EAOGpB,IAPH,CAOQ,IAPR,EAOc,UAAUiB,CAAV,EAAa;AACvB,eAAO9B,UAAU,CAAC,CAAC8B,CAAC,CAACE,GAAH,EAAQF,CAAC,CAACG,GAAV,CAAD,CAAV,CAA2B,CAA3B,CAAP;AACD,OATH,EAUGpB,IAVH,CAUQ,GAVR,EAUa,UAAUiB,CAAV,EAAa;AACtB,eAAOI,IAAI,CAACC,IAAL,CAAUL,CAAC,CAACM,KAAZ,IAAqB,CAA5B;AACD,OAZH,EAaGrB,KAbH,CAaS,MAbT,EAaiB,gBAbjB,EAcGA,KAdH,CAcS,SAdT,EAcoB,IAdpB,EAgBE;AACA;AAjBF,OAkBGsB,EAlBH,CAkBM,WAlBN,EAkBmB,UAAUP,CAAV,EAAa;AAC5BhB,QAAAA,GAAG,CAACwB,UAAJ,GACGC,QADH,CACY,GADZ,EAEGxB,KAFH,CAES,SAFT,EAEoB,EAFpB;AAGAD,QAAAA,GAAG,CAAC0B,IAAJ,CAASV,CAAC,CAACW,KAAX,EACG1B,KADH,CACS,MADT,EACkBvB,EAAE,CAACkD,KAAH,CAASC,KAAV,GAAmB,IADpC,EAEG5B,KAFH,CAES,KAFT,EAEiBvB,EAAE,CAACkD,KAAH,CAASE,KAAT,GAAiB,EAAlB,GAAwB,IAFxC;AAGD,OAzBH,EA2BE;AA3BF,OA4BGP,EA5BH,CA4BM,UA5BN,EA4BkB,UAAUP,CAAV,EAAa;AAC3BhB,QAAAA,GAAG,CAACwB,UAAJ,GACGC,QADH,CACY,GADZ,EAEGxB,KAFH,CAES,SAFT,EAEoB,CAFpB;AAGD,OAhCH,EArGU,CAuIV;;AACA,UAAI8B,MAAM,GAAGrD,EAAE,CACZmB,MADU,CACH,MADG,EAEVC,MAFU,CAEH,KAFG,EAGVC,IAHU,CAGL,OAHK,EAGI,QAHJ,EAIVA,IAJU,CAIL,OAJK,EAII,GAJJ,EAKVA,IALU,CAKL,QALK,EAKK,GALL,EAMVc,SANU,CAMA,GANA,EAOVC,IAPU,CAOLtB,KAAK,CAACwC,MAAN,GAAeC,KAAf,GAAuBC,OAAvB,EAPK,EAQVnB,KARU,GASVjB,MATU,CASH,GATG,EAUVC,IAVU,CAUL,WAVK,EAUQ,UAAUiB,CAAV,EAAad,CAAb,EAAgB;AAAE,eAAO,iBAAiBA,CAAC,GAAG,EAArB,GAA0B,GAAjC;AAAuC,OAVjE,CAAb;AAYA6B,MAAAA,MAAM,CACHjC,MADH,CACU,MADV,EAEGC,IAFH,CAEQ,OAFR,EAEiB,EAFjB,EAGGA,IAHH,CAGQ,QAHR,EAGkB,EAHlB,EAIGE,KAJH,CAIS,MAJT,EAIiBT,KAJjB;AAMAuC,MAAAA,MAAM,CACHjC,MADH,CACU,MADV,EAEGgB,IAFH,CAEQnB,UAFR,EAGGI,IAHH,CAGQ,GAHR,EAGa,EAHb,EAIGA,IAJH,CAIQ,GAJR,EAIa,CAJb,EAKGA,IALH,CAKQ,IALR,EAKc,OALd,EAMG2B,IANH,CAMQ,UAAUV,CAAV,EAAa;AAAE,eAAOA,CAAP;AAAW,OANlC;AASD,K,CAAC;;;;6BAEO;AACP,aAAO;AAAK,QAAA,EAAE,EAAE,MAAM,KAAKmB,KAAL,CAAWC,EAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AAED;;;;EAjLiB9D,S;;AAqLpB,eAAeK,KAAf","sourcesContent":["import React, { Component } from 'react'\nimport StatesLived from \"../public/data/stateslived.json\"\nimport CitiesLived from \"../public/data/citieslived.json\"\nimport USData from \"../public/data/us-states.json\"\nimport * as d3 from \"d3\"\n\n\nclass UsMap extends Component {\n\n  componentDidMount() {\n    this.statesLived = StatesLived;\n    this.citieslived = CitiesLived;\n    this.usData = USData;\n    this.drawChart();\n  }\n\n  drawChart() {\n\n    // jus tunpacking for tidier variable names downstream\n    let usData = this.usData;\n    let statesLived = this.statesLived\n    let citieslived = this.citieslived\n\n    // Original Author: Width and height of map\n    var width = 960;\n    var height = 500;\n\n    // Original Author:  D3 Projection\n    var projection = d3\n      .geo\n      .albersUsa()\n      .translate([width / 2, height / 2]) // Original Author:  translate to center of screen\n      .scale([1000]); // Original Author:  scale things down so see entire US\n\n\n    // Original Author:  Define path generator\n    var path = d3\n      .geo\n      .path() // Original Author:  path generator that will convert GeoJSON to SVG paths\n      .projection(projection);  // Original Author:  tell path generator to use albersUsa projection\n\n    // Original Author:  Define linear scale for output\n    var color = d3\n      .scale\n      .linear()\n      .range([\"rgb(213,222,217)\", \"rgb(69,173,168)\", \"rgb(84,36,55)\", \"rgb(217,91,67)\"]);\n\n    var legendText = [\"Cities Lived\", \"States Lived\", \"States Visited\", \"Nada\"];\n\n    // Original Author: Create SVG element and append map to the SVG\n    // I am not sure this does what the original authors' comments say\n    // I think it just make the svg and appends it the body of the document\n    var svg = d3\n      .select(\"body\")\n      .append(\"svg\")\n      .attr(\"width\", width)\n      .attr(\"height\", height);\n\n    // Original Author:  Append Div for tooltip to SVG\n    // not sure this works or is needed\n    var div = d3\n      .select(\"body\")\n      .append(\"div\")\n      .attr(\"class\", \"tooltip\")\n      .style(\"opacity\", 0);\n\n    // essentially, this loops through the cities lived data and adds attributes\n    // from it to the USData objects so they can be used to to map it later on \n\n    // Original Author:  Loop through each state data value in the .csv file\n    for (var i = 0; i < statesLived.length; i++) {\n\n      // Original Author:  Grab State Name\n      var dataState = statesLived[i].state;\n\n      // Original Author:  Grab data value \n      var dataValue = statesLived[i].visited;\n\n      // Original Author:  Find the corresponding state inside the GeoJSON\n      for (var j = 0; j < usData.features.length; j++) {\n        var jsonState = usData.features[j].properties.name;\n\n        if (dataState == jsonState) {\n\n          // Original Author:  Copy the data value into the JSON\n          usData.features[j].properties.visited = dataValue;\n\n          // Original Author:  Stop looking through the JSON\n          break;\n        }\n      }\n    }\n\n    // Original Author:  Bind the data to the SVG and create one path per GeoJSON feature\n    svg.selectAll(\"path\")\n      .data(usData.features)\n      .enter()\n      .append(\"path\")\n      .attr(\"d\", path)\n      .style(\"stroke\", \"#fff\")\n      .style(\"stroke-width\", \"1\")\n      .style(\"fill\", function (d) {\n\n        // Original Author:  Get data value\n        let haveVisited = d.properties.visited;\n\n        if (haveVisited) {\n          // Original Author: If value exists…\n          return color(haveVisited);\n        } else {\n          // Original Author: If value is undefined…\n          return \"rgb(213,222,217)\";\n        }\n      });\n\n\n\n    svg.selectAll(\"circle\")\n      .data(citieslived)\n      .enter()\n      .append(\"circle\")\n      .attr(\"cx\", function (d) {\n        return projection([d.lon, d.lat])[0];\n      })\n      .attr(\"cy\", function (d) {\n        return projection([d.lon, d.lat])[1];\n      })\n      .attr(\"r\", function (d) {\n        return Math.sqrt(d.years) * 4;\n      })\n      .style(\"fill\", \"rgb(217,91,67)\")\n      .style(\"opacity\", 0.85)\n\n      // Original Author:  Modification of custom tooltip code provided by Malcolm Maclean, \"D3 Tips and Tricks\" \n      // Original Author:  http:// Original Author: www.d3noob.org/2013/01/adding-tooltips-to-d3js-graph.html\n      .on(\"mouseover\", function (d) {\n        div.transition()\n          .duration(200)\n          .style(\"opacity\", .9);\n        div.text(d.place)\n          .style(\"left\", (d3.event.pageX) + \"px\")\n          .style(\"top\", (d3.event.pageY - 28) + \"px\");\n      })\n\n      // Original Author:  fade out tooltip on mouse out               \n      .on(\"mouseout\", function (d) {\n        div.transition()\n          .duration(500)\n          .style(\"opacity\", 0);\n      });\n\n    // Original Author:  Modified Legend Code from Mike Bostock: http:// Original Author: bl.ocks.org/mbostock/3888852\n    var legend = d3\n      .select(\"body\")\n      .append(\"svg\")\n      .attr(\"class\", \"legend\")\n      .attr(\"width\", 140)\n      .attr(\"height\", 200)\n      .selectAll(\"g\")\n      .data(color.domain().slice().reverse())\n      .enter()\n      .append(\"g\")\n      .attr(\"transform\", function (d, i) { return \"translate(0,\" + i * 20 + \")\"; });\n\n    legend\n      .append(\"rect\")\n      .attr(\"width\", 18)\n      .attr(\"height\", 18)\n      .style(\"fill\", color);\n\n    legend\n      .append(\"text\")\n      .data(legendText)\n      .attr(\"x\", 24)\n      .attr(\"y\", 9)\n      .attr(\"dy\", \".35em\")\n      .text(function (d) { return d; });\n\n\n  } // Original Author: // Original Author:  drawcharts\n\n  render() {\n    return <div id={\"#\" + this.props.id\n    } ></div >\n  }\n\n}\n\nexport default UsMap"]},"metadata":{},"sourceType":"module"}