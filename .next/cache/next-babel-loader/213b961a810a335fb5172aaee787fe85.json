{"ast":null,"code":"var _jsxFileName = \"/home/thadryan/Workspace/nextd3/components/UsMap.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport StatesLived from \"../public/data/stateslived.json\";\nimport USData from \"../public/data/us-states.json\";\nimport * as d3 from \"d3\";\n\nclass UsMap extends Component {\n  componentDidMount() {\n    this.statesLived = StatesLived;\n    this.citieslived = CitiesLived;\n    this.usData = USData;\n    this.renderMap();\n  }\n\n  renderMap() {\n    // just unpacking for tidier variable names downstream\n    let usData = this.usData;\n    let statesLived = this.statesLived;\n    let citieslived = this.citieslived;\n    var width = 960;\n    var height = 500;\n    var projection = d3.geo.albersUsa().translate([width / 2, height / 2]).scale([1000]);\n    var path = d3.geo.path().projection(projection);\n    var color = d3.scale.linear().range([\"rgb(213,222,217)\", \"rgb(69,173,168)\", \"rgb(84,36,55)\", \"rgb(217,91,67)\"]);\n    var legendText = [\"Cities Lived\", \"States Lived\", \"States Visited\", \"Nada\"];\n    var svg = d3.select(\"body\").append(\"svg\").attr(\"width\", width).attr(\"height\", height);\n    var div = d3.select(\"body\").append(\"div\").attr(\"class\", \"tooltip\").style(\"opacity\", 0);\n\n    for (var i = 0; i < statesLived.length; i++) {\n      var dataState = statesLived[i].state;\n      var dataValue = statesLived[i].visited;\n\n      for (var j = 0; j < usData.features.length; j++) {\n        var jsonState = usData.features[j].properties.name;\n\n        if (dataState == jsonState) {\n          usData.features[j].properties.visited = dataValue;\n          break;\n        }\n      }\n    }\n\n    svg.selectAll(\"path\").data(usData.features).enter().append(\"path\").attr(\"d\", path).style(\"stroke\", \"#fff\").style(\"stroke-width\", \"1\").style(\"fill\", function (d) {\n      let haveVisited = d.properties.visited;\n\n      if (haveVisited) {\n        return color(haveVisited);\n      } else {\n        return \"rgb(213,222,217)\";\n      }\n    });\n    var legend = d3.select(\"body\").append(\"svg\").attr(\"class\", \"legend\").attr(\"width\", 140).attr(\"height\", 200).selectAll(\"g\").data(color.domain().slice().reverse()).enter().append(\"g\").attr(\"transform\", function (d, i) {\n      return \"translate(0,\" + i * 20 + \")\";\n    });\n    legend.append(\"rect\").attr(\"width\", 18).attr(\"height\", 18).style(\"fill\", color);\n    legend.append(\"text\").data(legendText).attr(\"x\", 24).attr(\"y\", 9).attr(\"dy\", \".35em\").text(function (d) {\n      return d;\n    });\n  } // end renderMap()\n\n\n  render() {\n    return __jsx(\"div\", {\n      id: \"#\" + this.props.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 12\n      }\n    });\n  }\n\n}\n\nexport default UsMap;","map":{"version":3,"sources":["/home/thadryan/Workspace/nextd3/components/UsMap.js"],"names":["React","Component","StatesLived","USData","d3","UsMap","componentDidMount","statesLived","citieslived","CitiesLived","usData","renderMap","width","height","projection","geo","albersUsa","translate","scale","path","color","linear","range","legendText","svg","select","append","attr","div","style","i","length","dataState","state","dataValue","visited","j","features","jsonState","properties","name","selectAll","data","enter","d","haveVisited","legend","domain","slice","reverse","text","render","props","id"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport StatesLived from \"../public/data/stateslived.json\"\nimport USData from \"../public/data/us-states.json\"\nimport * as d3 from \"d3\"\n\n\nclass UsMap extends Component {\n\n  componentDidMount() {\n\n    this.statesLived = StatesLived;\n    this.citieslived = CitiesLived;\n    this.usData = USData;\n\n    this.renderMap();\n  }\n\n  renderMap() {\n\n    // just unpacking for tidier variable names downstream\n    let usData = this.usData;\n    let statesLived = this.statesLived\n    let citieslived = this.citieslived\n\n    var width = 960;\n    var height = 500;\n\n    var projection = d3\n      .geo\n      .albersUsa()\n      .translate([width / 2, height / 2])\n      .scale([1000]);\n\n    var path = d3\n      .geo\n      .path()\n      .projection(projection);\n\n    var color = d3\n      .scale\n      .linear()\n      .range([\"rgb(213,222,217)\", \"rgb(69,173,168)\", \"rgb(84,36,55)\", \"rgb(217,91,67)\"]);\n\n    var legendText = [\"Cities Lived\", \"States Lived\", \"States Visited\", \"Nada\"];\n\n    var svg = d3\n      .select(\"body\")\n      .append(\"svg\")\n      .attr(\"width\", width)\n      .attr(\"height\", height);\n\n    var div = d3\n      .select(\"body\")\n      .append(\"div\")\n      .attr(\"class\", \"tooltip\")\n      .style(\"opacity\", 0);\n\n    for (var i = 0; i < statesLived.length; i++) {\n\n      var dataState = statesLived[i].state;\n      var dataValue = statesLived[i].visited;\n\n      for (var j = 0; j < usData.features.length; j++) {\n        var jsonState = usData.features[j].properties.name;\n\n        if (dataState == jsonState) {\n          usData.features[j].properties.visited = dataValue;\n          break;\n        }\n      }\n    }\n\n    svg.selectAll(\"path\")\n      .data(usData.features)\n      .enter()\n      .append(\"path\")\n      .attr(\"d\", path)\n      .style(\"stroke\", \"#fff\")\n      .style(\"stroke-width\", \"1\")\n      .style(\"fill\", function (d) {\n        let haveVisited = d.properties.visited;\n        if (haveVisited) {\n          return color(haveVisited);\n        } else {\n          return \"rgb(213,222,217)\";\n        }\n      });\n\n    var legend = d3\n      .select(\"body\")\n      .append(\"svg\")\n      .attr(\"class\", \"legend\")\n      .attr(\"width\", 140)\n      .attr(\"height\", 200)\n      .selectAll(\"g\")\n      .data(color.domain().slice().reverse())\n      .enter()\n      .append(\"g\")\n      .attr(\"transform\", function (d, i) { return \"translate(0,\" + i * 20 + \")\"; });\n\n    legend\n      .append(\"rect\")\n      .attr(\"width\", 18)\n      .attr(\"height\", 18)\n      .style(\"fill\", color);\n\n    legend\n      .append(\"text\")\n      .data(legendText)\n      .attr(\"x\", 24)\n      .attr(\"y\", 9)\n      .attr(\"dy\", \".35em\")\n      .text(function (d) { return d; });\n\n  } // end renderMap()\n\n\n\n  render() {\n    return <div id={\"#\" + this.props.id\n    } ></div >\n  }\n\n}\n\nexport default UsMap"]},"metadata":{},"sourceType":"module"}