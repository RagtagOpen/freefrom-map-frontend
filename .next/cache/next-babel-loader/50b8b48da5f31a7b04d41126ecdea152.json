{"ast":null,"code":"var _jsxFileName = \"/home/thadryan/Workspace/nextd3/pages/Chart.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport StatesLived from \"../public/data/stateslived.json\";\nimport CitiesLived from \"../public/data/citieslived.json\";\nimport USData from \"../public/data/us-states.json\";\nimport * as d3 from \"d3\";\n\nclass Chart extends Component {\n  componentDidMount() {\n    this.statesLived = StatesLived;\n    this.citieslived = CitiesLived;\n    this.usData = USData;\n    this.drawChart();\n  }\n\n  drawChart() {\n    let usData = this.usData;\n    let statesLived = this.statesLived;\n    let citieslived = this.citieslived; // confirm we've gotten access to the states\n\n    for (var j = 0; j < usData.features.length; j++) {\n      var jsonState = usData.features[j].properties.name;\n      console.log(jsonState);\n    } //Width and height of map\n\n\n    var width = 960;\n    var height = 500; // D3 Projection\n\n    var projection = d3.geo.albersUsa().translate([width / 2, height / 2]) // translate to center of screen\n    .scale([1000]); // scale things down so see entire US\n    // Define path generator\n\n    var path = d3.geo.path() // path generator that will convert GeoJSON to SVG paths\n    .projection(projection); // tell path generator to use albersUsa projection\n    // Define linear scale for output\n\n    var color = d3.scale.linear().range([\"rgb(213,222,217)\", \"rgb(69,173,168)\", \"rgb(84,36,55)\", \"rgb(217,91,67)\"]);\n    var legendText = [\"Cities Lived\", \"States Lived\", \"States Visited\", \"Nada\"]; //Create SVG element and append map to the SVG\n\n    var svg = d3.select(\"body\").append(\"svg\").attr(\"width\", width).attr(\"height\", height); // Append Div for tooltip to SVG\n\n    var div = d3.select(\"body\").append(\"div\").attr(\"class\", \"tooltip\").style(\"opacity\", 0);\n    let data = statesLived;\n    let json = usData; // Loop through each state data value in the .csv file\n\n    for (var i = 0; i < data.length; i++) {\n      // Grab State Name\n      var dataState = data[i].state; // Grab data value \n\n      var dataValue = data[i].visited; // Find the corresponding state inside the GeoJSON\n\n      for (var j = 0; j < json.features.length; j++) {\n        var jsonState = json.features[j].properties.name;\n\n        if (dataState == jsonState) {\n          // Copy the data value into the JSON\n          json.features[j].properties.visited = dataValue; // Stop looking through the JSON\n\n          break;\n        }\n      }\n    } // Bind the data to the SVG and create one path per GeoJSON feature\n\n\n    svg.selectAll(\"path\").data(json.features).enter().append(\"path\").attr(\"d\", path).style(\"stroke\", \"#fff\").style(\"stroke-width\", \"1\").style(\"fill\", function (d) {\n      // Get data value\n      var value = d.properties.visited;\n\n      if (value) {\n        //If value exists…\n        return color(value);\n      } else {\n        //If value is undefined…\n        return \"rgb(213,222,217)\";\n      }\n    }); // Map the cities I have lived in!\n\n    d3.csv(\"cities-lived.csv\", function (data) {\n      svg.selectAll(\"circle\").data(data).enter().append(\"circle\").attr(\"cx\", function (d) {\n        return projection([d.lon, d.lat])[0];\n      }).attr(\"cy\", function (d) {\n        return projection([d.lon, d.lat])[1];\n      }).attr(\"r\", function (d) {\n        return Math.sqrt(d.years) * 4;\n      }).style(\"fill\", \"rgb(217,91,67)\").style(\"opacity\", 0.85) // Modification of custom tooltip code provided by Malcolm Maclean, \"D3 Tips and Tricks\" \n      // http://www.d3noob.org/2013/01/adding-tooltips-to-d3js-graph.html\n      .on(\"mouseover\", function (d) {\n        div.transition().duration(200).style(\"opacity\", .9);\n        div.text(d.place).style(\"left\", d3.event.pageX + \"px\").style(\"top\", d3.event.pageY - 28 + \"px\");\n      }) // fade out tooltip on mouse out               \n      .on(\"mouseout\", function (d) {\n        div.transition().duration(500).style(\"opacity\", 0);\n      });\n    });\n  } //// drawcharts\n\n\n  render() {\n    return __jsx(\"div\", {\n      id: \"#\" + this.props.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 12\n      }\n    });\n  }\n\n}\n\nexport default Chart;","map":{"version":3,"sources":["/home/thadryan/Workspace/nextd3/pages/Chart.js"],"names":["React","Component","StatesLived","CitiesLived","USData","d3","Chart","componentDidMount","statesLived","citieslived","usData","drawChart","j","features","length","jsonState","properties","name","console","log","width","height","projection","geo","albersUsa","translate","scale","path","color","linear","range","legendText","svg","select","append","attr","div","style","data","json","i","dataState","state","dataValue","visited","selectAll","enter","d","value","csv","lon","lat","Math","sqrt","years","on","transition","duration","text","place","event","pageX","pageY","render","props","id"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport StatesLived from \"../public/data/stateslived.json\"\nimport CitiesLived from \"../public/data/citieslived.json\"\nimport USData from \"../public/data/us-states.json\"\nimport * as d3 from \"d3\"\n\n\nclass Chart extends Component {\n\n  componentDidMount() {\n    this.statesLived = StatesLived;\n    this.citieslived = CitiesLived;\n    this.usData = USData;\n    this.drawChart();\n  }\n\n  drawChart() {\n\n    let usData = this.usData;\n    let statesLived = this.statesLived\n    let citieslived = this.citieslived\n\n    // confirm we've gotten access to the states\n    for (var j = 0; j < usData.features.length; j++) {\n      var jsonState = usData.features[j].properties.name;\n      console.log(jsonState);\n    }\n    //Width and height of map\n    var width = 960;\n    var height = 500;\n\n    // D3 Projection\n    var projection = d3\n      .geo\n      .albersUsa()\n      .translate([width / 2, height / 2]) // translate to center of screen\n      .scale([1000]); // scale things down so see entire US\n\n\n    // Define path generator\n    var path = d3\n      .geo\n      .path() // path generator that will convert GeoJSON to SVG paths\n      .projection(projection);  // tell path generator to use albersUsa projection\n\n    // Define linear scale for output\n    var color = d3\n      .scale\n      .linear()\n      .range([\"rgb(213,222,217)\", \"rgb(69,173,168)\", \"rgb(84,36,55)\", \"rgb(217,91,67)\"]);\n\n    var legendText = [\"Cities Lived\", \"States Lived\", \"States Visited\", \"Nada\"];\n\n    //Create SVG element and append map to the SVG\n    var svg = d3\n      .select(\"body\")\n      .append(\"svg\")\n      .attr(\"width\", width)\n      .attr(\"height\", height);\n\n    // Append Div for tooltip to SVG\n    var div = d3\n      .select(\"body\")\n      .append(\"div\")\n      .attr(\"class\", \"tooltip\")\n      .style(\"opacity\", 0);\n\n    let data = statesLived;\n    let json = usData;\n\n\n    // Loop through each state data value in the .csv file\n    for (var i = 0; i < data.length; i++) {\n\n      // Grab State Name\n      var dataState = data[i].state;\n\n      // Grab data value \n      var dataValue = data[i].visited;\n\n      // Find the corresponding state inside the GeoJSON\n      for (var j = 0; j < json.features.length; j++) {\n        var jsonState = json.features[j].properties.name;\n\n        if (dataState == jsonState) {\n\n          // Copy the data value into the JSON\n          json.features[j].properties.visited = dataValue;\n\n          // Stop looking through the JSON\n          break;\n        }\n      }\n    }\n\n    // Bind the data to the SVG and create one path per GeoJSON feature\n    svg.selectAll(\"path\")\n      .data(json.features)\n      .enter()\n      .append(\"path\")\n      .attr(\"d\", path)\n      .style(\"stroke\", \"#fff\")\n      .style(\"stroke-width\", \"1\")\n      .style(\"fill\", function (d) {\n\n        // Get data value\n        var value = d.properties.visited;\n\n        if (value) {\n          //If value exists…\n          return color(value);\n        } else {\n          //If value is undefined…\n          return \"rgb(213,222,217)\";\n        }\n      });\n\n\n    // Map the cities I have lived in!\n    d3.csv(\"cities-lived.csv\", function (data) {\n\n      svg.selectAll(\"circle\")\n        .data(data)\n        .enter()\n        .append(\"circle\")\n        .attr(\"cx\", function (d) {\n          return projection([d.lon, d.lat])[0];\n        })\n        .attr(\"cy\", function (d) {\n          return projection([d.lon, d.lat])[1];\n        })\n        .attr(\"r\", function (d) {\n          return Math.sqrt(d.years) * 4;\n        })\n        .style(\"fill\", \"rgb(217,91,67)\")\n        .style(\"opacity\", 0.85)\n\n        // Modification of custom tooltip code provided by Malcolm Maclean, \"D3 Tips and Tricks\" \n        // http://www.d3noob.org/2013/01/adding-tooltips-to-d3js-graph.html\n        .on(\"mouseover\", function (d) {\n          div.transition()\n            .duration(200)\n            .style(\"opacity\", .9);\n          div.text(d.place)\n            .style(\"left\", (d3.event.pageX) + \"px\")\n            .style(\"top\", (d3.event.pageY - 28) + \"px\");\n        })\n\n        // fade out tooltip on mouse out               \n        .on(\"mouseout\", function (d) {\n          div.transition()\n            .duration(500)\n            .style(\"opacity\", 0);\n        });\n    });\n\n  } //// drawcharts\n\n\n\n\n\n  render() {\n    return <div id={\"#\" + this.props.id\n    } ></div >\n  }\n\n}\n\nexport default Chart"]},"metadata":{},"sourceType":"module"}