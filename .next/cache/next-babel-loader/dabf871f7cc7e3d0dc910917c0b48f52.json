{"ast":null,"code":"var _jsxFileName = \"/home/thadryan/Workspace/nextd3/pages/Chart.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport StatesLived from \"../public/data/stateslived.json.json\";\nimport CitiesLived from \"../public/data/citieslived.json\";\nimport USData from \"../public/data/us-states.json\";\nimport * as d3 from \"d3\";\n\nclass Chart extends Component {\n  componentDidMount() {\n    console.log(\"Mounting Chart Component...\");\n    this.StatesLived = StatesLived;\n    this.CitiesLived = CitiesLived;\n    this.drawChart();\n  }\n\n  drawChart() {\n    let json = this.geoData; // confirm we've gotten access to the states\n\n    for (var j = 0; j < json.features.length; j++) {\n      var jsonState = json.features[j].properties.name;\n      console.log(jsonState);\n    } //Width and height of map\n\n\n    var width = 960;\n    var height = 500; // D3 Projection\n\n    var projection = d3.geo.albersUsa().translate([width / 2, height / 2]) // translate to center of screen\n    .scale([1000]); // scale things down so see entire US\n    // Define path generator\n\n    var path = d3.geo.path() // path generator that will convert GeoJSON to SVG paths\n    .projection(projection); // tell path generator to use albersUsa projection\n    // Define linear scale for output\n\n    var color = d3.scale.linear().range([\"rgb(213,222,217)\", \"rgb(69,173,168)\", \"rgb(84,36,55)\", \"rgb(217,91,67)\"]);\n    var legendText = [\"Cities Lived\", \"States Lived\", \"States Visited\", \"Nada\"]; //Create SVG element and append map to the SVG\n\n    var svg = d3.select(\"body\").append(\"svg\").attr(\"width\", width).attr(\"height\", height); // Append Div for tooltip to SVG\n\n    var div = d3.select(\"body\").append(\"div\").attr(\"class\", \"tooltip\").style(\"opacity\", 0);\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      id: \"#\" + this.props.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 12\n      }\n    });\n  }\n\n}\n\nexport default Chart;","map":{"version":3,"sources":["/home/thadryan/Workspace/nextd3/pages/Chart.js"],"names":["React","Component","StatesLived","CitiesLived","USData","d3","Chart","componentDidMount","console","log","drawChart","json","geoData","j","features","length","jsonState","properties","name","width","height","projection","geo","albersUsa","translate","scale","path","color","linear","range","legendText","svg","select","append","attr","div","style","render","props","id"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,WAAP,MAAwB,sCAAxB;AACA,OAAOC,WAAP,MAAwB,iCAAxB;AACA,OAAOC,MAAP,MAAmB,+BAAnB;AAEA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;;AAGA,MAAMC,KAAN,SAAoBL,SAApB,CAA8B;AAE5BM,EAAAA,iBAAiB,GAAG;AAClBC,IAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACA,SAAKP,WAAL,GAAmBA,WAAnB;AACA,SAAKC,WAAL,GAAmBA,WAAnB;AACA,SAAKO,SAAL;AACD;;AAEDA,EAAAA,SAAS,GAAG;AAEV,QAAIC,IAAI,GAAG,KAAKC,OAAhB,CAFU,CAIV;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,IAAI,CAACG,QAAL,CAAcC,MAAlC,EAA0CF,CAAC,EAA3C,EAA+C;AAC7C,UAAIG,SAAS,GAAGL,IAAI,CAACG,QAAL,CAAcD,CAAd,EAAiBI,UAAjB,CAA4BC,IAA5C;AACAV,MAAAA,OAAO,CAACC,GAAR,CAAYO,SAAZ;AACD,KARS,CASV;;;AACA,QAAIG,KAAK,GAAG,GAAZ;AACA,QAAIC,MAAM,GAAG,GAAb,CAXU,CAaV;;AACA,QAAIC,UAAU,GAAGhB,EAAE,CAChBiB,GADc,CAEdC,SAFc,GAGdC,SAHc,CAGJ,CAACL,KAAK,GAAG,CAAT,EAAYC,MAAM,GAAG,CAArB,CAHI,EAGqB;AAHrB,KAIdK,KAJc,CAIR,CAAC,IAAD,CAJQ,CAAjB,CAdU,CAkBQ;AAGlB;;AACA,QAAIC,IAAI,GAAGrB,EAAE,CACViB,GADQ,CAERI,IAFQ,GAED;AAFC,KAGRL,UAHQ,CAGGA,UAHH,CAAX,CAtBU,CAyBkB;AAE5B;;AACA,QAAIM,KAAK,GAAGtB,EAAE,CACXoB,KADS,CAETG,MAFS,GAGTC,KAHS,CAGH,CAAC,kBAAD,EAAqB,iBAArB,EAAwC,eAAxC,EAAyD,gBAAzD,CAHG,CAAZ;AAKA,QAAIC,UAAU,GAAG,CAAC,cAAD,EAAiB,cAAjB,EAAiC,gBAAjC,EAAmD,MAAnD,CAAjB,CAjCU,CAmCV;;AACA,QAAIC,GAAG,GAAG1B,EAAE,CACT2B,MADO,CACA,MADA,EAEPC,MAFO,CAEA,KAFA,EAGPC,IAHO,CAGF,OAHE,EAGOf,KAHP,EAIPe,IAJO,CAIF,QAJE,EAIQd,MAJR,CAAV,CApCU,CA0CV;;AACA,QAAIe,GAAG,GAAG9B,EAAE,CACT2B,MADO,CACA,MADA,EAEPC,MAFO,CAEA,KAFA,EAGPC,IAHO,CAGF,OAHE,EAGO,SAHP,EAIPE,KAJO,CAID,SAJC,EAIU,CAJV,CAAV;AAWD;;AAEDC,EAAAA,MAAM,GAAG;AACP,WAAO;AAAK,MAAA,EAAE,EAAE,MAAM,KAAKC,KAAL,CAAWC,EAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AAnE2B;;AAuE9B,eAAejC,KAAf","sourcesContent":["import React, { Component } from 'react'\nimport StatesLived from \"../public/data/stateslived.json.json\"\nimport CitiesLived from \"../public/data/citieslived.json\"\nimport USData from \"../public/data/us-states.json\"\n\nimport * as d3 from \"d3\"\n\n\nclass Chart extends Component {\n\n  componentDidMount() {\n    console.log(\"Mounting Chart Component...\")\n    this.StatesLived = StatesLived;\n    this.CitiesLived = CitiesLived;\n    this.drawChart();\n  }\n\n  drawChart() {\n\n    let json = this.geoData;\n\n    // confirm we've gotten access to the states\n    for (var j = 0; j < json.features.length; j++) {\n      var jsonState = json.features[j].properties.name;\n      console.log(jsonState);\n    }\n    //Width and height of map\n    var width = 960;\n    var height = 500;\n\n    // D3 Projection\n    var projection = d3\n      .geo\n      .albersUsa()\n      .translate([width / 2, height / 2]) // translate to center of screen\n      .scale([1000]); // scale things down so see entire US\n\n\n    // Define path generator\n    var path = d3\n      .geo\n      .path() // path generator that will convert GeoJSON to SVG paths\n      .projection(projection);  // tell path generator to use albersUsa projection\n\n    // Define linear scale for output\n    var color = d3\n      .scale\n      .linear()\n      .range([\"rgb(213,222,217)\", \"rgb(69,173,168)\", \"rgb(84,36,55)\", \"rgb(217,91,67)\"]);\n\n    var legendText = [\"Cities Lived\", \"States Lived\", \"States Visited\", \"Nada\"];\n\n    //Create SVG element and append map to the SVG\n    var svg = d3\n      .select(\"body\")\n      .append(\"svg\")\n      .attr(\"width\", width)\n      .attr(\"height\", height);\n\n    // Append Div for tooltip to SVG\n    var div = d3\n      .select(\"body\")\n      .append(\"div\")\n      .attr(\"class\", \"tooltip\")\n      .style(\"opacity\", 0);\n\n\n\n\n\n\n  }\n\n  render() {\n    return <div id={\"#\" + this.props.id}></div>\n  }\n\n}\n\nexport default Chart"]},"metadata":{},"sourceType":"module"}